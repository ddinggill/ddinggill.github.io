-keystore, ssl (https 적용)

1. SSL(Secure Sockets Layer)
 -인터넷을 통해 클라이언트와 서버가 통신할 때 통신 내용을 안전하게 보호하는 방법
 -SSL은 서버 인증(Server Authentication), 클라이언트 인증(Client Authentication) 그리고 데이타 암호화(Data Encryption) 기능을 제공
 -인증(Authentication)은 통신의 상대방이 맞는지 확인하는 절차 의미, 암호화는 데이터가 누출되더라도 외부에서 이 내용을 해독할수 없게 되는걸 의미
 -SSL을 사용하는 URL은 https 라는 스킴(scheme)을 사용하여 구분
 
2. 공개키, 비밀키 그리고 인증서 (Public Keys, Private Keys and Certificates)
 -인증을 수행할 때 SSL은 공개키 암호화(public-key cryptography)라는 기술을 사용. 공개키 암호화는 공개키(public key)와 비밀키(private key) 이 둘의 조합에 근거한 알고리즘
 -공개키로 암호화된 데이타는 그 공개키와 짝이 되는 비밀키에 의해서만 해독이 가능. 반대로 비밀키로 암호화된 데이타 역시 짝이 되는 공개키로 해독할 수도 있습니다.
 -인증서(Certificate)는 소유자의 공개키가 맞는지를 검증하는 도구
 
3. Keytool 프로그램
 -Java SDK와 함께 배포되며 bin 디렉토리에 있는 보안 관련 프로그램, keytool은 키스토어(keystore)라는 일종의 데이타베이스를 관리하는 프로그램
 -키스토어는 두개의 항목을 가지고 있습니다. 
   키 엔트리 (key entry) : 비밀키와 공개키와 관련된 인증서 체인으로 구성됩니다. 
   공인 인증서 엔트리 (trusted certificate entry) : 신뢰할 수 있는 기관을 나타내는 공개키 인증서
 -키스토어의 각 항목은 유니크한 별명(alias)에 의해 식별. 키스토어에 새로운 엔티티를 추가할 때는 반드시 이 별명을 부여해야 합니다.   
 -keytool이 지원하는 커맨드
   genkey : 공개치/비밀키 쌍을 만듭니다. 지정한 키스토어가 없는 파일이라면 새로 파일을 생성 
   certreq : 인증서 서명 요청(CSR, Certificate Signing Request) 파일을 만듭니다. 
   import : 인증서를 키스토어에 추가합니다. 키스토어가 없는 파일이라면 새로 파일을 만듭니다. 
   export : 키스토어에서 인증서를 추출하여 파일로 저장
   list : 키스토어 엔트리들을 출력합니다.

4. KeyStore,Trust Store
 -keystore에 있는 인증서는 우리가 서버입장으로 발급한 인증서가 있고, TrustStore에는 우리가 클라이언트 입장으로 다른 시스템에 접속을 위한 키가 있다.
  원래 기본 인터넷에선 TrustStore가 필요가 업는데 그 이유는 그 사설업체들이 거기에 보관하고 있기때문에 우리가 따로 가지고 있을필요가 없다. 
  하지만 내부망에서는 그 사설업체역할을 하는것이 없기 떄문에 우리가 TrustStore를 가지고 거기에 다른 시스템에서 발급한 키를 가지고 그거가지고 
  보안 통신을 
 -KeyStore : KeyStore는 비밀키, 관련된 인증서 혹은 인증서 체인을 가지고 있는 데이타베이스입니다.인증서 체인은 클라이언트 인증서와 하나 이상의 CA 인증서(공인인증서)로 구성됩니다.
			 보통 서버 역할을 하는 측에서만 필요하지만, 클라이언트 인증을 요구하는 경우 클라이언트 쪽도 있어야 합니다.
 -Trust-Store : TrustStore는 클라이언트가 신뢰할 수 있는 인증서만을 가지고 있습니다.이들 인증서는 CA 루트 인증서 즉 자기서명 인증서입니다.
				보통 웹서버가 설치되면 cacerts.jks라는 파일명으로 이 TrustStore가 저장됩니다.
				
5. Spring boot 적용 (https://elfinlas.github.io/2017/11/29/springboot-https/, https://seongtak-yoon.tistory.com/10, https://ayoteralab.tistory.com/entry/Spring-Boot-24-https-TLS-SSL-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0)
 1)keystore제작
	-터미널에서 keytool -genkey -alias (키스토어의 별칭) -keyalg RSA -keystore (생성할 키스토어의 파일명).jks
 2)keystore에서 인증서 export
	-Trust-Store를 생성하기 위해서는 1번에서 생성한 Key-Store에서 인증서를 추출
	-keytool -export -alias (키스토어의 별칭) -keystore (키스토어의 파일명) -rfc -file (생성할 인증서 파일이름).cer
 3)trust store제작
	-위에서 생성한 인증서를 통해서 Trust Store를 생성
	-keytool -import -alias (Trust-Store의 별칭) -file (인증서 파일명) -keystore (생성할 Trust-Store 파일명).ts
 4)spring boot 환경구성(application.yml)
 
6.Example (http://cris.joongbu.ac.kr/course/java/api/java/security/KeyStore.html)
-KeyStoreManager
package com.xconnect.eai.server.service.keystore;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.Enumeration;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.google.common.collect.Lists;
import com.xconnect.eai.server.common.exception.XConnectEaiServerException;
import com.xconnect.eai.server.common.util.CommonUtils;

@Component
public class KeyStoreManager {

	private static final Logger LOG = LoggerFactory.getLogger(KeyStoreManager.class);

	public static List<Map<String, Object>> addCertificate(String keyStoreName, String keyStorePw,
			Map<String, X509Certificate> aliasx509CertiMap) throws XConnectEaiServerException {

		LOG.info("=== keystore : {}, password : {}, certifile size : {}", keyStoreName, keyStorePw,
				aliasx509CertiMap.size());

		FileOutputStream fos = null;
		try {

			List<Map<String, Object>> returnList = Lists.newArrayList();
//			resultMap.put("keystore", keyStoreName);

			KeyStore keyStore = getDefaultTypeKeyStore(keyStoreName, keyStorePw);

			for (Map.Entry<String, X509Certificate> entry : aliasx509CertiMap.entrySet()) {
				keyStore.setCertificateEntry(entry.getKey(), entry.getValue());
				Map<String, Object> resultMap = new LinkedHashMap<String, Object>();
				resultMap.put("alias", entry.getKey());
				X509Certificate x509certi = entry.getValue();
				Map<String, Object> certiMap = new LinkedHashMap<String, Object>();
				certiMap.put("version", x509certi.getVersion());
				certiMap.put("serial_number", x509certi.getSerialNumber().intValue());
				certiMap.put("signature_algorithm", x509certi.getSigAlgName());
				certiMap.put("signature_algorithm_oid", x509certi.getSigAlgOID());
				certiMap.put("issuer", x509certi.getIssuerX500Principal().getName());
				certiMap.put("subject", x509certi.getSubjectX500Principal().getName());
				certiMap.put("valid_from", x509certi.getNotBefore());
				certiMap.put("valid_to", x509certi.getNotAfter());
				certiMap.put("public_key", x509certi.getPublicKey().getEncoded());				
				resultMap.put("details", certiMap);
				returnList.add(resultMap);
			}
			fos = new FileOutputStream(keyStoreName);
			keyStore.store(fos, keyStorePw.toCharArray());
			return returnList;

		} catch (CertificateException | KeyStoreException | IOException | NoSuchAlgorithmException e) {
			LOG.error("[KeyStoreManager] >> addCertificate :: Error > " + CommonUtils.getPrintStackTrace(e));
			throw new XConnectEaiServerException(e.getMessage(), XConnectEaiServerException.CERTIFICATE_REGIST_FAILED);
		} finally {
			try {
				if (fos != null)
					fos.close();
			} catch (IOException e) {
				throw new XConnectEaiServerException(e.getMessage(),
						XConnectEaiServerException.CERTIFICATE_REGIST_FAILED);
			}
		}

	}

	public static List<Map<String, Object>> delCertificateEntry(String keyStoreName, String keyStorePw, List<String> delAliases)
			throws XConnectEaiServerException {

		LOG.info("=== keystore : {}, password : {}, certifile size : {}", keyStoreName, keyStorePw, delAliases);

		FileOutputStream fos = null;
		try {

			List<Map<String, Object>> returnList = Lists.newArrayList();
//			resultMap.put("keystore", keyStoreName);

			KeyStore keyStore = getDefaultTypeKeyStore(keyStoreName, keyStorePw);

			for (String alias : delAliases) {
				Map<String, Object> resultMap = new LinkedHashMap<String, Object>();
				resultMap.put("alias", alias);
				X509Certificate x509certi = (X509Certificate) keyStore.getCertificate(alias);
				Map<String, Object> certiMap = new LinkedHashMap<String, Object>();
				certiMap.put("version", x509certi.getVersion());
				certiMap.put("serial_number", x509certi.getSerialNumber().intValue());
				certiMap.put("signature_algorithm", x509certi.getSigAlgName());
				certiMap.put("signature_algorithm_oid", x509certi.getSigAlgOID());
				certiMap.put("issuer", x509certi.getIssuerX500Principal().getName());
				certiMap.put("subject", x509certi.getSubjectX500Principal().getName());
				certiMap.put("valid_from", x509certi.getNotBefore());
				certiMap.put("valid_to", x509certi.getNotAfter());
				certiMap.put("public_key", x509certi.getPublicKey().getEncoded());						
				resultMap.put("details", certiMap);
				
				keyStore.deleteEntry(alias);
				
				returnList.add(certiMap);
			}

			fos = new FileOutputStream(keyStoreName);
			keyStore.store(fos, keyStorePw.toCharArray());

			return returnList;

		} catch (KeyStoreException | NoSuchAlgorithmException | CertificateException | IOException e) {
			throw new XConnectEaiServerException(e.getMessage(), XConnectEaiServerException.CERTIFICATE_DELETE_FAILED);
		} finally {
			try {
				if (fos != null)
					fos.close();
			} catch (IOException e) {
				throw new XConnectEaiServerException(e.getMessage(),
						XConnectEaiServerException.CERTIFICATE_DELETE_FAILED);
			}
		}
	}

	public static List<Map<String, Object>> getX509CertificatesDetail(String keyStoreName, String keyStorePw)
			throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {

		List<Map<String, Object>> resultList = Lists.newArrayList();

		KeyStore keyStore = getDefaultTypeKeyStore(keyStoreName, keyStorePw);
		if (keyStore != null && keyStore.size() > 0) {

			Map<String, Object> certiInfo = null;
			Enumeration<String> enumAlias = keyStore.aliases();

			while (enumAlias.hasMoreElements()) {

				String alias = enumAlias.nextElement();
				X509Certificate x509certi = (X509Certificate) keyStore.getCertificate(alias);

				certiInfo = new LinkedHashMap<String, Object>();
				certiInfo.put("alias", alias);
				
				Map<String, Object> certiMap = new LinkedHashMap<String, Object>();
				certiMap.put("version", x509certi.getVersion());
				certiMap.put("serial_number", x509certi.getSerialNumber().intValue());
				certiMap.put("signature_algorithm", x509certi.getSigAlgName());
				certiMap.put("signature_algorithm_oid", x509certi.getSigAlgOID());
				certiMap.put("issuer", x509certi.getIssuerX500Principal().getName());
				certiMap.put("subject", x509certi.getSubjectX500Principal().getName());
				certiMap.put("valid_from", x509certi.getNotBefore());
				certiMap.put("valid_to", x509certi.getNotAfter());
				certiMap.put("public_key", x509certi.getPublicKey().getEncoded());
				certiInfo.put("details", certiMap);
				resultList.add(certiInfo);
			}
		}
		return resultList;
	}

	private static KeyStore getDefaultTypeKeyStore(String keyStoreName, String keyStorePw)
			throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {

		InputStream fis = null;
		KeyStore keyStore = null;
		try {
			//디폴트 형태의 KeyStore 객체생성
			keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
			
			//특정 KeyStore에 액세스 하기위한 로드
			//load 메서드를 사용해 비어있는 키스토어를 작성하려면, InputStream인수로서 null을 건네줍니다
			File keyStoreFile = new File(keyStoreName);
			if (keyStoreFile.exists()) {
				fis = new FileInputStream(keyStoreFile);
				keyStore.load(fis, keyStorePw.toCharArray());
			} else {
				keyStore.load(null, null);
			}
		} finally {
			try {
				if (fis != null)
					fis.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return keyStore;
	}

	private static InputStream getFullInputStream(String filename) throws IOException {

		FileInputStream fis = new FileInputStream(filename);
		DataInputStream dis = new DataInputStream(fis);

		byte[] bytes = new byte[dis.available()];
		dis.readFully(bytes);
		ByteArrayInputStream bais = new ByteArrayInputStream(bytes);

		dis.close();

		return bais;
	}

	private static X509Certificate getX509Certificate(String filename) throws CertificateException, IOException {
		CertificateFactory fact = CertificateFactory.getInstance("X.509");
		return (X509Certificate) fact.generateCertificate(getFullInputStream(filename));
	}

	public static void main(String... args) throws Exception {

		try {

//			KeyStoreManager mgr = new KeyStoreManager();

			String keystorePath = "C:\\Users\\A931878\\Documents\\test_keystore.jks";
			String password = "1234";
			Map<String, X509Certificate> aliasCertiNamesMap = new LinkedHashMap<String, X509Certificate>();
			aliasCertiNamesMap.put("test_certi",
					KeyStoreManager.getX509Certificate("C:\\Users\\A931878\\Documents\\test_certi.pem"));
			aliasCertiNamesMap.put("test_certi2",
					KeyStoreManager.getX509Certificate("C:\\Users\\A931878\\Documents\\test_certi.pem"));
			aliasCertiNamesMap.put("securesign_cert",
					KeyStoreManager.getX509Certificate("C:\\Users\\A931878\\Documents\\securesign_cert.pem"));
			aliasCertiNamesMap.put("securesign_cert2",
					KeyStoreManager.getX509Certificate("C:\\Users\\A931878\\Documents\\securesign_cert.pem"));
			List<String> delAlias = Lists.newArrayList();
			delAlias.add("test_certi");
			delAlias.add("securesign_cert2");

			// 키스토어에 인증서 등록
			KeyStoreManager.addCertificate(keystorePath, password, aliasCertiNamesMap);

			// 키스토어의 인증서 삭제
			KeyStoreManager.delCertificateEntry(keystorePath, password, delAlias);

			// 키스토어에 등록되어 있는 인증서별 상세 내용
			List<Map<String, Object>> resultList = KeyStoreManager.getX509CertificatesDetail(keystorePath, password);

			System.out.println("\r\n");
			for (Map<String, Object> certiMap : resultList) {
				for (Map.Entry<String, Object> entry : certiMap.entrySet()) {
					System.out.println(String.format("\t%s : %s", entry.getKey(), entry.getValue()));
					System.out.println("\t---------------------------------------------------------------------------");
				}
				System.out.println("\r\n");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

	}
}
