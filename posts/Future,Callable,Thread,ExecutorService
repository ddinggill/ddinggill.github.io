-Future,Callable,Thread,ExecutorService
 Future는 한마디로 결과를 받기위한 예약티켓 같은 개념으로 이해하자
 
1.ExecutorService에 들어가는 type에는 2가지를 제공하는데, Runnable 과 Callable을 상속하여 구현한 클래스를 받을 수 있도록 되어 있다.
-Runnable : return 값이 없는 쓰레드
-Callable : return 값이 존재하는 쓰레드
-리턴값이 있어야하는 경우엔 Callable을, return 값이 없고 쓰레드 독자적으로 작업을 처리할 수 있는 경우에는 Runnable을 상속하여 워커 쓰레드 클래스를 만들어 사용하자.

2.사용법
-작업 대상의 Callable객체를 만들고 ExecutorService에 등록한 다음 Future객체를 반환받는다
-작업 결과는 Future를 통해 얻는다.

3.장점
-멀티 코어 환경에서 두배의 가까운 성능을 보인다.
-비동기 문제를 해결 할 수 있다.

4.Callable과 Thread
-테스트 케이스 설정: Facebook과 Twitter의 타임라인 데이터들을 동시에 요청하여 두 타임라인데이터를 날짜별로 정렬하여 병합한다.
-기존 문제점: 쓰레드로 구현한다면 blocking이 되지 않아 메인 쓰레드가 start()한 후 그냥 나머지 처리를 진행하게되고 결국 두 데이터가 모두 모이지 않은 상태에서 원하지 않은 병합작업이 실행되거나,
		  또는 처리속도가 무지막지하게 빨라서 미쳐 양쪽의 데이터가 모두 도착하지 않았는데도 병합이 완료되었다고 하는 경우가 생길 수 있다.
          이를 보완하기 위해서는 공용메모리나 파이프등을 이용하여, 하나의 쓰레드가 다른 한쪽의 처리 완료여부를 지속적으로 확인해야 한다. 물론 이러한 코드는 while() 등으로 구현될것이므로 자원낭비와 처리율저하등 심각한 문제를 야기할 수 있다.
-대안제시: Callable을 통하여 처리하게되면 이러한 점을 극복할 수 있다고 한다. Callable로 쓰레드 처리시 자동적으로 blocking되어 하나의 쓰레드 처리가 모두 완료될때까지 프로세스가 멈추게된다. 
		 그러므로 모든 쓰레드 처리가 완료된 후 병합처리를 진행할 수 있을 것이다.
-Callable을 통한 구현 설명
Thread와는 달리 Callable은 각각 쓰레드가 생성되어 두 요청에 대한 데이터들을 각각 인풋하는데 중요한점은 메인 클래스에서 facebook 보다 뒤에 처리되는 twitter의 요청이 완료되어도 앞에 있는 facebook의 요청이 완료되지 않으면 진행하지 않는다는 점이다. 
정확히는 facebook의 응답 값을 get하지 못하였기 때문에 해당 라인에서 블락킹 된 것이다.
여기서 알아 두어야 할 것은 Future클래스에 대한 것으로, 이 클래스를 통하여 Callable이 반환한 값을 취할 수 있다. 다른 말로 하자면 Callable이 어떤 값을 반환할때까지 이 클래스는 get()할 수 없다(블락킹 된다)는 것이다. 좀 혼동이 올 수 있으니 다음과 같이 생각하면 쉽게 이해할 수 있을 것이다.
Future클래스의 get()메서드는 해당 인스턴스가 바라보고 있는 Callable인스턴스가 처리를 마치고 값을 반환하기 전까지 Future.get()을 실행한 라인에서 블락킹 된다.
그래도 Future클래스의 이름(특성)이 이해하기 어렵다면 또 이렇게 생각하면 쉽다.
“Future클래스는 Callable을 통해 반환’될’ 값을 get 할 수 있다.”
즉, 어떤 메서드인지간에 신경쓰지말고 하여간 그 메서드가 주구장창 돌아가다가 값을 반환하는 그때 get할 수 있다는 이야기이다.(뭐 이래 풀어쓰기가 어려워) 따라서, 주구장창 돌아가다가 값이 반환되는 미래의 어느 시점이라는 그 죽일놈을 기다리게 블락킹 한다는 소리가 된다.

-FaceBook에요청하여 응답받는 객체 생성
public class fbCallable implements Callable<List<String>> {
       @Override
       public List<String> call() throws Exception {
            List<String> list = new ArrayList<String>();
 
            /*페이스북 타임라인을 응답하는 객체 (응답시간 : 0.05 * 300) 초*/
             for (int i = 0; i < 300; i++) {
                  System. out.println("getFacebookTimeline... / line : " + i);
                  
                  Thread. sleep(50);
                  list.add( "Facebook timeline : " + i);
            }
            
             return list;
      }
}

-Twitter에 요청하여 응답받는 객체 생성
public class twCallable implements Callable<List<String>> {
       @Override
       public List<String> call() throws Exception {
            List<String> list = new ArrayList<String>();
 
            /*페이스북 타임라인을 응답하는 객체 (응답시간 : 0.02 * 500) 초*/
             for ( int i = 0; i < 500; i++) {
                  System. out .println("getTwitterTimeline... / line : " + i);
                  
                  Thread. sleep(20);
                  list.add( "Twitter timeline : " + i);
            }
            
             return list;
      }
}

-두 응답을 병합하는 객체 생성
public class mergeFbTw {
       public static void main(String[] args) {
             try {
                  ExecutorService executor = Executors.newFixedThreadPool(2);
                  
                  List<String> responseFb = new ArrayList<String>();
                  List<String> responseTw = new ArrayList<String>();
                  
                  Future<List<String>> futureFb = executor.submit( new fbCallable());
                  Future<List<String>> futureTw = executor.submit( new fbCallable());
                  
                  responseFb = futureFb. get();
                  System. out.println("Facebook Response is Done!" );
                  
                  responseFb = futureTw. get();
                  System. out.println("Twitter Response is Done!" );
                  
                   /*두 응답이 모두 완료되었을때만 시행함*/
                   if(futureFb.isDone() && futureTw.isDone()){
                        System. out.println("Merge Start!" );
                        
                         for (String string : responseFb) {
                              System. out.println(string);
                        }
                        
                         for (String string : responseTw) {
                              System. out.println(string);
                        }
                  }                
            } catch (InterruptedException e) {
                  e.printStackTrace();
            } catch (ExecutionException e) {
                  e.printStackTrace();
            }
      }
}
