Hotdeploy(Dynamic Library Loading) 설정 

참고사이트 및 참고용어
-https://stove99.tistory.com/64(URLClassLoader관련)
-java reflection 코드
-https://jeong-pro.tistory.com/166(WatchService 관련)

-서버가 구동된 상태에서 Camel 컴포넌트를 추가해야 할 경우에 jar파일을 다운받아서
 Repository에 저장하게 되면, 이 폴더를 감시하는 watchservice가 이벤트를 발생한다. 그러면
 HotdeployLibManager가 동적으로 이를 서버에 반영한다.
-그리고 컴포넌트 정보와 파라미터테이블에 이를 우리가 등록해주면 사용자입장에서 개발화면에서
 값을 보고 사용할 수 있게 된다.
 
ClassLoader의 계층구조
-VM/EXT/System/Custom(VM과 EXT는 우리가 건들 수 있는 영역이 아니다. 그래서 System클래스로더에 작업요청을 위임한다)
위임(delegation 패턴)
-어떤 메소드의 처리를 다른 인스턴스의 메소드에 맡긴다는 의미
 즉, 클라이언트 코드에서 구성(composite)하고 있는 참조 객체를 통해 메서드를 호출하는 것(delegation)을 말함

1. HotdeployLibManager를 빈으로 생성하는데 생성자 파라미터로 watch_folder를 줘서 처음에 기존 폴더에 있는 jar 파일들을 로딩
2. HotdeployLibManager에 URLClassLoader형태의 값을 ClassLoader.getSystemClassLoader();로 얻어온다
3. Method형태로 URLClassLoader의 addURL메소드를 얻어와서 method.setAccessible(true)로 이 함수에 사용접근?(protected로 선언된 메소드를 public으로 바꿔주는 일)을 허용한다.
4. watch_folder에의 파일리스트를 가져와서 ".jar"를 포함한 파일들을 로딩
5. 그러고 start()호출하는데 이함수는 쓰레드로 무한루프 돌면서 hotDeployPath를 모니터링하여 jar 파일이 생성, 수정, 삭제 되었을때 이벤트를 받아 Library 로딩을 수행한다.

이렇게 동적으로 하는 결정적인 이유
- 기존 pom.xml로 등록된 jar 파일들 같은 경우는 서버가 로딩될때 class파일가지고 이미 인스턴스까지 생성해서 메모리에 올려져 있는다.
  하지만 URLClassLoader로 로딩되는 jar파일들은 인스턴스가 생성된게 아니라 나중에 사용자가 개발모드에서 빈으로 등록할때 인스턴스를 생성하기 위한 메타정보만 로딩되는 것이기 때문에 메모리를 잡아먹지 않고 있고 속도 빠르다.
  즉, 동적으로 jar를 로딩하고, 최초에 서버 가동시 메모리를 적게 잡아먹는게 핵심
  
- watch_folder는 서버홈에 repository(C:\Users\A932060\eclipse-workspace\XConnect_Server\dist\repository)

/*
 * Copyright Hyundai-AutoEver
 * All rights reserved.
 * 
 * This software is the confidential and proprietary information
 * of HAE. ("Confidential Information").
 */

package com.xconnect.eai.server.service.register; 

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardWatchEventKinds;
import java.nio.file.WatchEvent;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;
import java.nio.file.WatchEvent.Kind;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.xconnect.eai.server.common.util.CommonUtils;

/**
 * <pre>
 * com.xconnect.eai.server.service.register
 *    |_ HotdeployLibManager.java
 * 
 * </pre>
 * @date : 2020. 3. 26. 오전 9:20:02
 * @version : 
 * @author : A931744
 */
public class HotdeployLibManager {

	private static final Logger LOG = LoggerFactory.getLogger(HotdeployLibManager.class);

	private static final URLClassLoader urlClassLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();
	private static Method method = null;

	private String hotDeployPath = "";
	private WatchKey watchKey;
	private WatchService watchService = null;
	private Thread watcher = null;
	private static final Map<String, URLClassLoader> libLoaderMap = new HashMap<String, URLClassLoader>();
	
	@SuppressWarnings("unused")
	private HotdeployLibManager() {}

	public HotdeployLibManager(String watch_folder) throws Exception {
		this.hotDeployPath = watch_folder;
		method = URLClassLoader.class.getDeclaredMethod("addURL", new Class[] { URL.class });
		method.setAccessible(true);
		
		loadJarIndDir(this.hotDeployPath);
		start();
	}
	
	/**
	 * 
	 * <pre>
	 * 1. 개요 : hotDeployPath를 모니터링하여 jar 파일이 생성, 수정, 삭제 되었을때 이벤트를 받아 Library 로딩을 수행한다.
	 * 2. 처리내용 : 
	 * </pre>
	 * @Method Name : start
	 * @date : 2020. 3. 26.
	 * @author : A931744
	 * @history : 
	 * <pre>
	 *	-----------------------------------------------------------------------
	 *	변경일		작성자				변경내용  
	 *	----------- ------------------- ---------------------------------------
	 *	2020. 3. 26.		A931744				최초 작성 
	 *	-----------------------------------------------------------------------
	 * </pre>
	 * @throws IOException
	 */
	public void start() throws IOException {
		try {
			// watchService 생성
			watchService = FileSystems.getDefault().newWatchService();
			// 경로 생성
			Path path = Paths.get(hotDeployPath);
			// 해당 디렉토리 경로에 WatchService와 Event 등록 (file 생성, 삭제, 수정 이벤트 등록)
			path.register(watchService, StandardWatchEventKinds.ENTRY_CREATE, StandardWatchEventKinds.ENTRY_DELETE, StandardWatchEventKinds.ENTRY_MODIFY);
			
			watcher = new Thread(() -> {
				while (true) {
					try {
						watchKey = watchService.take(); // 이벤트가 오길 대기(Blocking)
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					//long currentTime = new DateTime().getMillis();
					List<WatchEvent<?>> events = watchKey.pollEvents(); // 이벤트들을 가져옴
					for (WatchEvent<?> event : events) {
						// 이벤트 종류
						Kind<?> kind = event.kind();
						// 경로
						Path event_path = (Path) event.context();
						String file_name = event_path.toString();
						
						// expire item remove
						//handleExpiredWaitTimes(currentTime);
						
						// 확장자가 jar 파일이 아니면 skip.
						if(!file_name.trim().toLowerCase().endsWith(".jar")) continue;
						
						String fileName = hotDeployPath + File.separator + file_name;
						
						if (kind.equals(StandardWatchEventKinds.ENTRY_MODIFY)) {
							LOG.debug("## Watch HotDeploy Folder :: {} >> {} ", kind.name(), fileName);

							boolean isGrowing = false;
							Long initialWeight = new Long(0);
							Long finalWeight = new Long(0);

							do {
								initialWeight = Paths.get(fileName).toFile().length();
								try {
									Thread.sleep(1000);
								} catch (InterruptedException e) {
								}
								finalWeight = Paths.get(fileName).toFile().length();
								isGrowing = initialWeight < finalWeight;

							} while (isGrowing);
							LOG.debug("## Watch HotDeploy Folder {}이(가) 끝났습니다. Library Loading을 진행합니다. >> {} ", kind.name(), fileName);
							try {
								loadLibrary(fileName);
							} catch (Exception e) {
								e.printStackTrace();
							}
						} else if (kind.equals(StandardWatchEventKinds.ENTRY_DELETE)) {
							LOG.debug("## Watch HotDeploy Folder :: ENTRY_DELETE >> " + fileName);
						}
					}
					if (!watchKey.reset()) {
						try {
							watchService.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				}
			});
			watcher.start();
			
		} catch (IOException e) {
			LOG.error("[HotdeployLibHandler] >> start > Error! :: {}", CommonUtils.getPrintStackTrace(e));
		}
	}
	
	/**
	 * Watch Service stop및 thread 정리
	 */
	public void stop() {
		try {
			if(watchService != null) {
				watchService.close();
			}
			if(watcher != null) {
				watcher.join();
			}
		} catch (Exception e) {
			LOG.error("[HotdeployLibHandler] >> stop > Error! :: {}", CommonUtils.getPrintStackTrace(e));
		}
	}
	
	// 대상폴더에 있는 jar 파일 로딩
	public void loadJarIndDir(String dir) {
		try {
			new File(dir).listFiles(new FileFilter() {
				public boolean accept(File jar) {
					// jar 파일인 경우만 로딩
					if (jar.toString().toLowerCase().contains(".jar")) {
						try {
							// URLClassLoader.addURL(URL url) 메소드 호출
							method.invoke(urlClassLoader, new Object[] { jar.toURI().toURL() });
							libLoaderMap.put(jar.toString(), urlClassLoader);
							
							LOG.debug("{} is loaded.", (jar.toString()) );
						} catch (Exception e) {
							LOG.debug("{} 파일을 로딩할수 없습니다.", (dir + File.separator + jar.toString()) );
						}
					}
					return false;
				}
			});
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * 
	 * <pre>
	 * 1. 개요 : 지정된 파일 (jar file)을 ClassLoader 를 이용하여 로딩한다.
	 * 2. 처리내용 : 
	 * </pre>
	 * @Method Name : loadLibrary
	 * @date : 2020. 3. 26.
	 * @author : A931744
	 * @history : 
	 * <pre>
	 *	-----------------------------------------------------------------------
	 *	변경일		작성자				변경내용  
	 *	----------- ------------------- ---------------------------------------
	 *	2020. 3. 26.		A931744				최초 작성 
	 *	-----------------------------------------------------------------------
	 * </pre>
	 * @param fileName
	 * @throws Exception
	 */
	public void loadLibrary(String fileName) throws Exception {
		try {
			try {
				//unload(fileName);
			} catch (Exception e) { }
			
			// URLClassLoader.addURL(URL url) 메소드 호출
			File jar = new File(fileName);
			method.invoke(urlClassLoader, new Object[] { jar.toURI().toURL() });
			libLoaderMap.put(fileName, urlClassLoader);
			
			LOG.debug("{} is loaded.", fileName);
		} catch (Exception e) {
			LOG.error("[enclosing_type] >> enclosing_method > Error! :: {}", CommonUtils.getPrintStackTrace(e));
			throw e;
		}
	}
	
	/**
	 * Un-loading 수행
	 */
	public boolean unload(String jarFileName) {
		URLClassLoader loader = libLoaderMap.get(jarFileName);
		if (loader == null)
			return true;

		try {
			loader.close();
			LOG.debug("{} is UnLoaded.", jarFileName);
			return true;
		} catch (IOException e) {
			return false;
		} finally {
			libLoaderMap.remove(jarFileName);
		}
	}
}

