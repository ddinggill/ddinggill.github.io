참고사이트 : https://atoz-develop.tistory.com/entry/Spring-Spring-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%A9%94%EC%8B%9C%EC%A7%80-%EB%8B%A4%EA%B5%AD%EC%96%B4-%EB%B0%8F-%EC%9E%AC%EB%A1%9C%EB%94%A9-%EC%B2%98%EB%A6%AC

SpringBoot에서는 src/main/resources/messages.properties를 찾았을 때 자동으로 MessageSource를 구성하고,
해당 파일에 다국어를 작성해주기만 하면, SpringBoot가 알아서 사용자 언어를 확인한 후 메시지를 변환해줍니다.

1) messages.properties
- messages_{언어코드}_{국가코드}.properties 파일에 번역 텍스트를 작성해줍니다.
  messages.properties 파일은 사용자 언어 환경에 맞는 properties 파일이 없을 경우, 기본 값으로 보여지는 파일입니다.
  
2) 로케일 결정하는 빈 생성
로케일 결정자(Resolver) 종류엔 
세션(SessionLocaleResolver), 쿠키(CookieLocaleResolver), 헤더(AcceptHeaderLocaleResolver, 헤더의 Accept-Language 값 기반으로 판단), 고정값(FixedLocaleResolver) 리졸버가 있다. 
내 코드에선 쿠키 기반 로케일 결정을 사용

// CookieLocaleResolver
	@Bean
	public LocaleResolver localeResolver() {
		CookieLocaleResolver localeResolver = new CookieLocaleResolver(); 
		localeResolver.setDefaultLocale(Locale.US);
		localeResolver.setCookieName("localeInfo");
		localeResolver.setCookieMaxAge(24 * 60 * 60);
		return localeResolver;
	}
  setDefaultLocale()로 기본 로케일을 설정하는데, 인자값으로 Locale 클래스를 넣어 줘야 한다. 
  자동완성이 잘 되므로 원하는 로케일을 찾아서 Locale.US 식으로 넣어 주면 된다.

3) 로케일 변경 Interceptor Bean
url 파라미터를 받아서 로케일을 변경하는 방법을 설정하는 부분이다. 코드대로 하면 https://domain.com?locale=en으로 들어왔을 때,
APPLICATION_LOCALE 쿠키가 en으로 설정되면서 로케일이 변경된다.
코드에선 인자값을 locale로 설정했지만, 원하는대로 설정하면 된다.
// locale change interceptor
	@Bean
    public LocaleChangeInterceptor localeChangeInterceptor() {
        LocaleChangeInterceptor lci = new LocaleChangeInterceptor();
        lci.setParamName("locale");
        return lci;
    }
    
4) 인터셉터 목록에 인터셉터를 등록
@Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(localeChangeInterceptor());
    }

5)Message 빈 등록
- spring boot 사용시 ResourceBundleMessageSource가 자동으로 빈으로 등록이 되고 이 빈이 messages 리소스 번들을 메시지 소스로 읽어온다.
  따라서 빈을 등록하지 않고 바로 사용할 수 있다.
  그러나 MessageSource의 구현체를 ResourceBundleMessageSource가 아닌 ReloadableResourceBundleMessageSource를 사용하면 
  어플리케이션 실행 중에 메시지 리소스 변경을 reload하게 하여 변경사항을 적용할 수 있다.
  
@Bean
	public ReloadableResourceBundleMessageSource messageSource() {
		
		ReloadableResourceBundleMessageSource source = new ReloadableResourceBundleMessageSource();
		// Set a single basename, following the basic ResourceBundle conventionof not specifying file extension or language codes.
		source.setBasename("file:"+System.getProperty("server.home")+"/conf/messages/message"); 
		// Set the default charset to use for parsing properties files
		source.setDefaultEncoding("UTF-8"); 
		// Set the number of seconds to cache loaded properties files. 
		// 메시지 소스를 다시 캐시하는 최대 시간(초)를 설정
		source.setCacheSeconds(1); 
		// Set whether to use the message code as default message instead ofthrowing a NoSuchMessageException.
		source.setUseCodeAsDefaultMessage(true);
		// 기본 메세지 영어
		Locale.setDefault(new Locale("en"));
		return source;
	}

6)메시지 출력
@Component
public class AppRunner implements ApplicationRunner {
 
    @Autowired
    MessageSource messageSource;
 
    @RequestMapping(value="/selectCodeMast")
	@ResponseBody
	public Map<String, Object> selectCodeMast(@RequestBody CommonCodeVO commonCodeVO) throws Exception{
		Map<String, Object> result = new HashMap<>();
		try{
			commonCodeVO.init();
			int cnt = commonCodeService.selectCodeMastCnt(commonCodeVO);
			commonCodeVO.setTotalCnt(cnt);
			commonCodeVO.setDelYn("N");
			
			
			result.put("data", commonCodeService.selectCodeMast(commonCodeVO));
			result.put("cnt", commonCodeVO);
		} catch(Exception e) {
			LOG.error(CommonUtils.getPrintStackTrace(e));
			throw new WebException(messageSource.getMessage("10002", null, LocaleContextHolder.getLocale()), e, WebException.WEB_DB_QUERY_FAILED);
			System.out.println(messageSource.getMessage("10002", new String[]{"Leica"}, Locale.KOREA));
			//getMessage()의 첫 번째 파라미터는 메시지 프로퍼티의 key, 두 번째 파라미터는 메시지 출력 시 전달할 argument, 세 번째 파라미터는 Locale을 설정
		}
		return result;
	}	
}

7)JSP에서 사용하기
<spring:message code="column.text.0237" text="Sundry Code"/>


--------------------------------------------Configuration하는 풀소스-------------------------------------------
@Configuration
public class AftersalesMessageConfig implements WebMvcConfigurer {
	
	@Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(localeChangeInterceptor());
    }
	
	@Bean
	public ReloadableResourceBundleMessageSource messageSource() {
		
		ReloadableResourceBundleMessageSource source = new ReloadableResourceBundleMessageSource();
		// Set a single basename, following the basic ResourceBundle conventionof not specifying file extension or language codes.
		source.setBasename("file:"+System.getProperty("server.home")+"/conf/messages/message"); 
		// Set the default charset to use for parsing properties files
		source.setDefaultEncoding("UTF-8"); 
		// Set the number of seconds to cache loaded properties files. 
		source.setCacheSeconds(1); 
		// Set whether to use the message code as default message instead ofthrowing a NoSuchMessageException.
		source.setUseCodeAsDefaultMessage(true);
		// 기본 메세지 영어
		Locale.setDefault(new Locale("en"));
		return source;
	}
	
	/*
	@Bean
	public SessionLocaleResolver localeResolver() {
		SessionLocaleResolver ssnresolver = new SessionLocaleResolver(); 
		ssnresolver.setDefaultLocale(null);
		//System.out.println("Server Default Locale : "+Locale.getDefault().getLanguage());
		//System.out.println("SessionLocaleResolver : null setting");
		return ssnresolver;
	}
	*/
	
	// locale change interceptor
	@Bean
    public LocaleChangeInterceptor localeChangeInterceptor() {
        LocaleChangeInterceptor lci = new LocaleChangeInterceptor();
        lci.setParamName("locale");
        return lci;
    }
	
	// CookieLocaleResolver
	@Bean
	public LocaleResolver localeResolver() {
		CookieLocaleResolver localeResolver = new CookieLocaleResolver(); 
		localeResolver.setDefaultLocale(Locale.US);
		localeResolver.setCookieName("localeInfo");
		localeResolver.setCookieMaxAge(24 * 60 * 60);
		return localeResolver;
	}
}
