참고사이트 : https://atoz-develop.tistory.com/entry/Spring-Spring-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%A9%94%EC%8B%9C%EC%A7%80-%EB%8B%A4%EA%B5%AD%EC%96%B4-%EB%B0%8F-%EC%9E%AC%EB%A1%9C%EB%94%A9-%EC%B2%98%EB%A6%AC

SpringBoot에서는 src/main/resources/messages.properties를 찾았을 때 자동으로 MessageSource를 구성하고,
해당 파일에 다국어를 작성해주기만 하면, SpringBoot가 알아서 사용자 언어를 확인한 후 메시지를 변환해줍니다.

1) messages.properties
- messages_{언어코드}_{국가코드}.properties 파일에 번역 텍스트를 작성해줍니다.
  messages.properties 파일은 사용자 언어 환경에 맞는 properties 파일이 없을 경우, 기본 값으로 보여지는 파일입니다.
  
2) 로케일 결정하는 빈 생성
로케일 결정자(Resolver) 종류엔 
세션(SessionLocaleResolver), 쿠키(CookieLocaleResolver), 헤더(AcceptHeaderLocaleResolver, 헤더의 Accept-Language 값 기반으로 판단), 고정값(FixedLocaleResolver) 리졸버가 있다. 
내 코드에선 쿠키 기반 로케일 결정을 사용

// CookieLocaleResolver
	@Bean
	public LocaleResolver localeResolver() {
		CookieLocaleResolver localeResolver = new CookieLocaleResolver(); 
		localeResolver.setDefaultLocale(Locale.US);
		localeResolver.setCookieName("localeInfo");
		localeResolver.setCookieMaxAge(24 * 60 * 60);
		return localeResolver;
	}
  setDefaultLocale()로 기본 로케일을 설정하는데, 인자값으로 Locale 클래스를 넣어 줘야 한다. 
  자동완성이 잘 되므로 원하는 로케일을 찾아서 Locale.US 식으로 넣어 주면 된다.

3) 로케일 변경 Interceptor Bean
// locale change interceptor
	@Bean
    public LocaleChangeInterceptor localeChangeInterceptor() {
        LocaleChangeInterceptor lci = new LocaleChangeInterceptor();
        lci.setParamName("locale");
        return lci;
    }
    
4) 인터셉터 목록에 인터셉터를 등록
@Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(localeChangeInterceptor());
    }

5)Message
