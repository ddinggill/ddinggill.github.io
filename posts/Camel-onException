-camelContext onException(참고 https://torpedocorp.github.io/2018/11/07/ErrorHandling_onException.html)

모든 exception이 아닌, 특정 exception에 대하여 처리하고 싶을 때 정의 Syntax : <onException> 주로 
error handler(defaultErrorHandler, Dead Letter Channel)와 같이 결합하여 사용

Ex)
<onException>
      <exception>java.io.IOException</exception>
    	<to uri="file://d:/camel/output/exception"/>
</onException>

onException(Exception.class).handled(true)   //.continued(false)
.process(exceptionProcessor);
onException(XConnectEaiServerException.class).handled(true)  //.continued(false)
.process(exceptionProcessor1);

 하나의 <onException>에 여러 개의 exception을 정의할 수 있다.
 <onException>은 다른 error handler보다 우선 순위가 높다. ex) defaultErrorHandler와 
 java.lang.Exception을 감지하는 onException, 2개가 정의 되어 있는데 java.lang.Exception이 발생한다면 <onException> 구문이 실행된다.
 발생한 exception을 <onException> 구문과 비교할 때, exception의 상속 구조대로 밑→위로 올라가면서 하나씩 비교해 일치하는 exception이 있는지 비교한다. 
 발생한 exception에 대해 상속 구조에 포함된 onException이 2개 이상 존재한다면, 발생하는 exception과 정확하게 일치하는 것을 먼저 handling
 위의 예에서 XConnectEaiServerException이 발생하면 exceptionProcessor1이 핸들링,
 아니면 exceptionProcessor이 핸들링

-Redelivery(redeliveryPolicy)
 <onException>에서는 재전송에 대한 default는 0으로 설정 (재전송 X) 재전송하고자 한다면 redeliveryPolicy를 통해 재전송 설정
  <onException>
      <exception>java.io.IOException</exception>
      <redeliveryPolicy maximumRedeliveries="5" retryAttemptedLogLevel="WARN"/>
    	<to uri="file://d:/camel/output/exception"/>
  </onException>
 
-<handled>
 (default) handled=false “handled=true”로 설정하게 되면 Camel이 제공하는 것이 아닌, 원하는 custom response를 caller에게 보낼 수 있다.
 
-<continued>
 “continued=true”를 사용하게 된다면 exception이 발생하더라도 무시하고 기존 routing 진행 <onException>을 쓰지 않고 continue 기능을 사용하고 싶다면, try/catch/finally을 이용해야 한다.
 주의점 : 하나의 <onException>에 handled와 continued를 같이 사용할 수 없다.

